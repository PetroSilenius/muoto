generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_id String    @db.Uuid
  user_id     String    @db.Uuid
  value       String[]
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  questions   questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id, question_id, user_id])
}

model images {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String         @db.Uuid
  url          String
  approved     Boolean        @default(false)
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  users        User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model questions {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content      String
  description  String?
  type         questionType
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  answers      answers[]
  options      options[]

  @@index([id])
}

model options {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content      String
  question_id  String         @db.Uuid
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  questions    questions      @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id])
}

model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()"))
  userId             String  @map("user_id") @db.Uuid
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  answers      answers[]
  images       images[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum questionType {
  ACTIVITY
  POSITIVE_TRAIT
  NEGATIVE_TRAIT
}
